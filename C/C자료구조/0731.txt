1-En()
2-De()
3-F(): front
4-R(): rear
5-show->출력
6-프로그램 종료

#include <stdio.h>
#include <stdlib.h>
typedef struct NODE {
	int data;
	struct NODE* next;
}N;
typedef struct Queue {
	N* front;
	N* rear;
	int size;
}Q;

void Enqueue(Q *q, int data) {
	N *n = (N*)malloc(sizeof(N));
	n->data = data;
	n->next = NULL;

	if (q->size == 0) {
		q->front = n;
	}
	else {
		q->rear->next = n;
	}
	q->rear = n;
	q->size++;
}

int Dequeue(Q *q) {
	int data = q->front->data;
	q->front = q->front->next;
	q->size--;

	return data;
}


int main() {

	Q q;
	q.size = 0;
	q.front = NULL;
	q.rear = NULL;

	int act;
	while (1) {
		printf("1.En() 2.De() 3.front 데이터 출력 4.rear 데이터 출력 5.출력 6.종료\n");
		scanf("%d", &act);
		if (act == 1) {
			int data;
			scanf("%d", &data);
			Enqueue(&q, data);
		}
		else if (act == 2) {
			if (q.size == 0) {
				printf("텅 빔\n");
				continue;
			}
			printf("Dequeue(): %d\n", Dequeue(&q));
		}
		else if (act == 3) {
			if (q.size == 0) {
				printf("텅 빔\n");
				continue;
			}
			printf("f(): %d\n", q.front->data);
		}
		else if (act == 4) {
			if (q.size == 0) {
				printf("텅 빔\n");
				continue;
			}
			printf("r(): %d\n", q.rear->data);
		}
		else if (act == 5) {
			if (q.size != 0) {
				N *p = q.front;
				while (p != NULL) {
					printf("%d ", p->data);
					p = p->next;
				}
				printf("\n");
			}
			else {
				printf("출력할 데이터가 없습니다\n");
				continue;
			}

		}

		else {
			printf("종료\n");
			break;
		}
	}


	return 0;
}


+++++


정렬
버블 삽입 선택 퀵


+++++

<버블>

#include <stdio.h>
#include <stdlib.h>

void bubble_sort(int *arr, int n) {
	for (int i = 0;i < n;i++) {
		for (int j = 0;j < n - 1;j++) {
			if (arr[j] > arr[j + 1]) {
				int tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;
			}
		}
		/*변화추이
		for (int i = 0;i < n;i++) {
			printf("%d ", arr[i]);
		}
		printf("\n");*/
	}
}
int main() {

	int n;
	scanf("%d", &n);

	int *arr = (int *)malloc(n * sizeof(int));
	for (int i = 0;i < n;i++) {
		scanf("%d", &arr[i]);
	}
	printf("정렬 전: ");
	for (int i = 0;i < n;i++) {
		printf("%d ", arr[i]);
	}
	printf("\n");


	bubble_sort(arr, n);

	printf("정렬 후: ");
	for (int i = 0;i < n;i++) {
		printf("%d ", arr[i]);
	}

	return 0;
}


+++++


삽입정렬

[ 3 | 1 4 2 5 ]
3은 고정시키고 
3이 1보다 작나? 작다
[ 1 3 | 4 2 5 ]
[ 1 3 4 | 2 5 ]
2랑 3 교환, 
[ 1 2 3 | 4 5 ]
3,4 교환

#include <stdio.h>
#include <stdlib.h>
void insertion_sort(int *arr, int n) {
	for (int i = 1;i < n;i++) {	//[ 3 | 1 4 2 5 ]
		for (int j = 0;j < i;j++) {	//0부터 i 직전까지 비교
			if (arr[i] < arr[j]) {	//앞에있는애가 뒤에있는애보다 작으면
				int tmp = arr[i];
				arr[i] = arr[j];
				arr[j] = tmp;
			}
		}

	}
}
int main() {

	int n;
	scanf("%d", &n);

	int *arr = (int *)malloc(n * sizeof(int));
	for (int i = 0;i < n;i++) {
		scanf("%d", &arr[i]);
	}
	printf("정렬 전: ");
	for (int i = 0;i < n;i++) {
		printf("%d ", arr[i]);
	}
	printf("\n");


	insertion_sort(arr, n);

	printf("정렬 후: ");
	for (int i = 0;i < n;i++) {
		printf("%d ", arr[i]);
	}

	return 0;
}


+++++


선택정렬
-앞에서부터 정렬

3 9 1 2 4
--
min=3
index=0
--
min=1
index=2
--

첨부터 끝까지 제일 작은걸 찾아 1
첫번째 자리와 1을 교환
1 9 3 2 4
다음은 두번째부터 끝까지 중에서 제일 작은데이터 찾아 2
1 2 3 9 4
다음은 세번째부터 ...

void selection_sort(int *arr, int n) {
	for (int i = 0; i < n; i++) {
		int min = arr[i];	//제일 처음값으로 설정
		int minIndex = i;
		for (int j = i; j < n; j++) {
			if (min > arr[j]) {	//내가 보고있는애보다 최소가 크다면
				min = arr[j];
				minIndex = j;
			}
		}
		int tmp = arr[i];
		arr[i] = arr[minIndex];	//arr[i]=min 써도 되긴 돼.
		arr[minIndex] = tmp;
		/////
		for (int a = 0; a < n; a++) {
			printf("%d ", arr[a]);
		}
		printf("\n");
	}
}


//selection_sort(arr, n);


+++++


퀵정렬 : 순환함수 이용
Divide & Conquer 분할정복

3 5 7 9 1 10 6 2 8 4
피벗(==피봇==pivot:기준)
맨 왼쪽의 데이터를 피벗으로 설정.
[3] 5l 7 9 1 10 6 2r 8 4 //left, right
피벗보다 작은값은 왼쪽에, 큰값은 오른쪽에 배치
왼 오 둘다 보류면 둘이 교환
[3] 2 7 9 1 10 6 5 8 4
[3] 2 7l 9 1r 10 6 5 8 4
[3] 2 1r 9l 7 10 6 5 8 4 l r  -> 교차(cross) 둘이 교차가 되면
피벗과 r 교환
1 2 [3] 9 7 10 6 5 8 4
피벗 기준 왼쪽배열과 오른쪽배열을 각각 퀵정렬로 보내.

-> [1] 2
-> [9] 7 10 6 5 8 4

언제까지? 요소가 1개일때까지 순환호출

*****
[퀵 정렬] : 순환함수
Divide & Conquer (분할정복)
[3] 5l 7 9 1 10 6 2r 8 4
피벗(==피봇==pivot:기준)
[3] 2 7l 9 1r 10 6 5 8 4
[3] 2 1r 9l 7 10 6 5 8 4 -> 교차(cross)
피벗<->r 교환
1 2 [3] 9 7 10 6 5 8 4
-> [1] 2
-> [9] 7 10 6 5 8 4
요소가 1개일때까지 순환호출
*****

#include <stdio.h>
#include <stdlib.h>

void swap(int *arr, int a, int b) {
	int tmp = arr[a];
	arr[a] = arr[b];
	arr[b] = tmp;
}
void quick_sort(int *arr, int start, int end) {
	//피벗만들기
	int pivot = arr[start];
	int l = start + 1;	//l은 지금 당장보는것, 인덱스
	int r = end;
	while (l <= r) {	//l>r 종료조건의 반대를 입력, 두개가 크로스 되기 전까지
		while (arr[l] < pivot) {
			l++;	//본인보다 큰 수를 찾을때까지 더하기 수행
		}
		while (arr[r] > pivot) {
			r--;
		}
		//여기 도달하면 멈춘것
		if (l <= r) {	//크로스 되기 전!!
			swap(arr, l, r);	//피벗 기준 왼쪽은 전부 작은수 오른쪽은 전부 큰수
		}
	}
	if (start < end) {	//요소가 1개가 될때까지, 중단시점
??????????????????????????
		swap(arr, start, r);
		quick_sort(arr, start, r - 1);	//현재 r이 피벗위치
		quick_sort(arr, r + 1, end);
	}
}
int main() {

	int n;
	scanf("%d", &n);

	int *arr = (int *)malloc(n * sizeof(int));
	for (int i = 0;i < n;i++) {
		scanf("%d", &arr[i]);
	}
	printf("정렬 전: ");
	for (int i = 0;i < n;i++) {
		printf("%d ", arr[i]);
	}
	printf("\n");


	quick_sort(arr,0,n-1);	//n번째 인덱스는 없기때문에 / l,r쓰려고

	printf("정렬 후: ");
	for (int i = 0;i < n;i++) {
		printf("%d ", arr[i]);
	}

	return 0;
}


+++++


문제
1. 랜덤으로 숫자 10개 생성(1~100)
2. 배열에 넣고 출력
3. 오름차순정렬하고 출력 =>이용하고픈 알고리즘 사용
3. 0~9중에 랜덤으로 선택, 해당 숫자를 맞춰보자!
//[ 1 3 17 18 19]
컴퓨터가 인덱스로 [2]를 뽑아, 선택된 숫자는 17

3<= X <=18
15?
16<=X<=18
N번 소요됨!

#include <time.h>
srand(time(NULL));
int num=rand()%100+1;




